<?php
/**
* @file
* Let user change their password in Google account.
*
* Let user change their password in the Google Account.
* This modules is a sub-module of the Password Changer and
* implements hooks_password_changer_api_check_user and
* hooks_password_changer_api_change_password
*/

include_once (dirname(__FILE__) . '/password_changer_google.inc' );

/*
 * Implement hook password_changer_api_check_user
 * From the password changer API 
 */
function password_changer_google_password_changer_api_check_user($user_name) {

 try {

  $current_user = new googleUser($user_name);
   
  if ($current_user->checkUserExist()) {
   
   return TRUE;
  
  }
  else {
   
   return FALSE;
  
  }
 }
 catch (passwordChangerGoogleExeption $e) {
  
   //Log error on the watchdog  
   watchdog('password_changer_google', $e->getMessage(), WATCHDOG_ERROR);
   
   //Handle problem gracefully is user complains we check the watchdog log
   return FALSE;
   
 }
 
}

/*
 *Implement hook password_changer_api_change_password
 *From the password changer API
 */
function password_changer_google_password_changer_api_change_password($credentials) {
  try {
   //Create new user
   $current_user = new googleUser($credentials['user_name']);
   
   //Change Google
   $result = $current_user->changeUserPassword($credentials);
   
   //Return status of the Google API
   return $result;
   
  }
  catch (passwordChangerGoogleExeption $e) {
   
   return password_changer_api_status(array('status' => 'error',
                                            'message' => $e->getMessage()));
    
  }
}

//Admin modules for configuration

/**
 * Implementation of hook_help().
 */

/*
function password_changer_google_help($path, $arg) {
  switch ($path) {
    case 'admin/help#password_changer_google':
      $output = '<p>' . t('Just testing help hook') . '</p>';
      return $output;
  }
}
*/

/**
 *Implement hook_menu()
 */
function password_changer_google_menu() {
 
  
  $items['admin/config/password_changer/password_changer_google'] = array(
    'title' => 'Password Changer Google Settings',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('password_changer_google_settings_page'),
    'access arguments' => array('administer password changer'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  //create menu item to remove page
  $items['admin/config/password_changer/password_changer_google/remove'] = array(
    'title' => 'Remove Password Changer Google Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('password_changer_google_settings_confirm_remove'),
    'access arguments' => array('administer password changer'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
 
}


/**
 * Display settings page.
 */
function password_changer_google_settings_page($form, &$form_state, $action = 'none', $id = 'none') {

  $action = filter_xss($action);
  $id = filter_xss($id);
    
  //get persistent variable from the variable table in the Drupal DB
  $settings = variable_get('password_changer_google_domains', array());

  //Get URL
  $google_login_url = variable_get('password_changer_google_login_url', array());
  
  //display the domain label field with the filed to enter domain
  $form['google_login_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Log-in URL:'),
    '#size' => 60,
    '#default_value' => (!empty($google_login_url))? $google_login_url['url']:'',
    '#maxlength' => 60,
    '#required' => TRUE,
    '#description' => t('Google log-in URL to retrieve token.'),
  );
  
  
  //if setting is empty do not display table or header
  if (!empty($settings)) {
    //create header for table
    $header = array(t('Drupal User Role'), t('Register Domain'), t('E-mail'), t('Update'), t('Remove'));
    
    //create table rows
    $rows = array();
    
    foreach ($settings AS $index => $role) {
      foreach ($role AS $rid => $values) {
        //Get role name
        $name = db_query('SELECT name FROM {role} WHERE rid = :rid', array(':rid' => $rid))->fetchField();
        
        //Set rows
        $rows[$index] = array('role' => t($name),
                              'domain' => t($values['domain']),
                              'E-mail' => t($values['email']),
                              'Update' => l(t('Update'), 'admin/config/password_changer/password_changer_google/update/' . $index),
                              'Delete' => l(t('Remove'), 'admin/config/password_changer/password_changer_google/remove/' . $index),
                              );
      }  
    }
    //Get header
    $table_rows['header'] =  $header;
    $table_rows['rows'] = $rows;
    
    //Set other variables
    $table_rows['attributes'] = array();
    $table_rows['caption']  = NULL;
    $table_rows['colgroups'] = array();
    $table_rows['sticky'] = array();
    $table_rows['empty']  = array();
    
    //Get table
    $table = theme_table($table_rows);
    
    //Display table
    $form['table'] = array(
         '#markup' => $table,
    );
  }
  
  
  //give the form a name
  $form['#attributes'] = array('name' => 'password_changer_google_settings');
 
  //if action is set display a hidden field to flag the form as
  //make sure that this setting exists
  

  //if update
  if ((strtolower($action) == 'update' || strtolower($action) == 'remove') && isset($settings[$id])) {
    //Set hidden field
    $form['action'] = array('#type' => 'hidden',
                            '#value' => strtolower($action),
                            '#name' => 'action', );
    //Set hidden field id
    $form['id'] = array('#type' => 'hidden',
                        '#value' => $id, );
    //Get array role id  
    foreach ($settings[$id] as $rid => $field) {
    }
  }

  
  //Get roles
  $roles = db_query( 'SELECT * FROM {role}')->fetchAllAssoc('rid');
 
  //Generate options array 
  foreach ($roles AS $role_id => $role) {
   $options[$role_id] = $role->name; 
  }
  
  //display the domain label field with the filed to enter domain
  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain register with Google:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['domain']:'',
    '#description' => t('Domain were users are going to change there password.'),
  );
  
  //display the role label and the select fields
  $form['role'] = array(
   '#type' => 'select',
   '#title' => t('Drupal User Role:'),
   '#options' => $options,
   '#required' => TRUE,
   '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                        isset($settings[$id][$rid]))? $rid:'',
   '#description' => t('Users with this role will use the domain register with Google to change their password.'),
  );
   
  //display the label and text field to holds the Google email
  $form['google_api_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Google API Account Emails:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['email']:'',
    '#description' => t('Email used to log-in to the Google API account, this needs to be a Google admin account in the register domain.'),
  );
   
  //display the label and text field to hold password
  $form['google_api_password'] = array(
    '#type' => 'password',
    '#title' => t('Google API Account Password:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['password']:'',
    '#description' => t('Password to the Google API account.'),
  );
   
  //display the label and text field to holds the Google account type
  $form['google_api_account_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Google API Account Type:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['account_type']:'HOSTED',
    '#description' => t('Account type for Google API account, default value is "HOSTED".'),
  );
  
   //display the label and text field to holds the Google service
  $form['google_api_service'] = array(
    '#type' => 'textfield',
    '#title' => t('Google API Service:'),
    '#size' => 60,
    '#maxlength' => 60,
    '#required' => TRUE,
    '#default_value' => ((strtolower($action) == 'update' || strtolower($action) == 'remove') &&
                         isset($settings[$id][$rid]))? $settings[$id][$rid]['service']:'apps',
    '#description' => t('Google API service, default value is "apps".'),
  );
  
  //display submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
   );
  //Return 
  return $form;

}

function isValid($value, $value_type = 'url')
{
 
 if ($value_type == 'domain') {
  
  preg_match ("/^[a-z0-9][a-z0-9\-]+[a-z0-9]$/i", $value);
 }
 elseif ($value_type == 'url') {
   return preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $url);
 }
 
}


/**
 * Validate form password_changer_google_settings_page.
 */
function password_changer_google_settings_page_validate($form, &$form_state) {
 
 
}


/**
 * Implement hook _submit password_changer_google_settings_page.
 */
function password_changer_google_settings_page_submit($form, &$form_state) {
  
  //Get domains
 $settings = variable_get('password_changer_google_domains', array());
 
 //Check if record is for update
 if (isset($form_state['values']['action'])) {
  
  //Check if the action is update
  if ($form_state['values']['action'] == 'update') {
    //If set make changes 
    if (isset($settings[$form_state['values']['id']])) {
      
      //Save updated record 
      $settings[$form_state['values']['id']] = array($form_state['values']['role'] =>
                                                     array('domain' => $form_state['values']['domain'],
                                                           'email' => $form_state['values']['google_api_email'],
                                                           'password' => $form_state['values']['google_api_password'],
                                                           'account_type' => strtoupper($form_state['values']['google_api_account_type']),
                                                           'service' => strtolower($form_state['values']['google_api_service'])));
    }
  }
 }//Add new domain
 else {
   //Remember to retrieve save data
   $settings[] = array($form_state['values']['role'] => array('domain' => $form_state['values']['domain'],
                                                             'email' => $form_state['values']['google_api_email'],
                                                             'password' => $form_state['values']['google_api_password'],
                                                             'account_type' => strtoupper($form_state['values']['google_api_account_type']),
                                                             'service' => strtolower($form_state['values']['google_api_service'])));
 }
 
  //Set log-in URL
  if (isset($form_state['values']['google_login_url'])) {
    $login_url = variable_get('password_changer_google_login_url', array());
    //If log-in URL is not empty
    if (!empty($login_url)) {
      //If log-in URL in the form is different from the log-in URL store
      if ($form_state['values']['google_login_url'] != $login_url['url'] ) {
         variable_set('password_changer_google_login_url',
            array('url' => $form_state['values']['google_login_url']));
      }
    }
  }
 

 //Save the password changer
 variable_set('password_changer_google_domains', $settings);
 
}



/**
 * Display delete confirmation form.
 */
function password_changer_google_settings_confirm_remove($form, &$form_state, $id = NULL ) {
    
  //get settings
  $settings = variable_get('password_changer_google_domains', array()); 
 
  //if type is not set redirect page to application payment
  if (isset($id)) {
    
    //Cleaning id variables
    $id = filter_xss($id);

    $form['id'] = array('#type' => 'hidden', '#value' => $id );
  

    //return confirmation form
    return confirm_form($form,
                 t('Are you sure you want to delete domain?'),
                 'admin/config/password_changer/password_changer_google' ,
                 'This action can not be undone.',
                 t('Delete'),
                 t('Cancel'));
  }
}


/**
 * Remove delete submit form.
 */

function password_changer_google_settings_confirm_remove_submit($form, &$form_state) {
  
  //Get domains
 $settings = variable_get('password_changer_google_domains', array());
 
 //Check if the id is set
 if (isset($form_state['values']['id'])) {
  //Check if the settings id is set
  if (isset($settings[$form_state['values']['id']])) {
    //Remove persistent variable
    unset($settings[$form_state['values']['id']]);
    //Save new array in persistent variable
    variable_set('password_changer_google_domains', $settings);
  }
 }
 
 //redirect to main form application settings form
  $form_state['redirect'] = 'admin/config/password_changer/password_changer_google';
}



