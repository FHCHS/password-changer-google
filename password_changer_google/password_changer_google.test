<?php
// $Id: password_changer_angel.test,v 0.1 2011/01/27 23:28:11 arod Exp $

/**
 * @file
 * Test case for Testing the page example module.
 *
 * This file contains the test cases to check if module is performing as
 * expected.
 *
 */
//Include files

//Installing module if I can use the 


//Extends DrupalWebTestCase to get database connection
class PasswordChangerGoogleAdminCase extends DrupalWebTestCase  {


  public static function getInfo() {
    return array(
      'name' => 'Google Password Changer Submodule - Configuration',
      'description' => 'Test Google password changer configuration pages.',
      'group' => 'Password Changer',
    );
  }
  
  function setUp() {
    parent::setUp('password_changer_api', 'password_changer_google');
    
     //Create user and login
    $this->admin_user = $this->drupalCreateUser(array('administer password changer'));
    $this->drupalLogin($this->admin_user);

  }
  
    // Test Case 1.1 
  function testPasswordChangerGoogleAccessHelp() {
   
  
    //Access help page
    $this->drupalGet('admin/help/password_changer_google');
    $this->assertResponse(200, t('Access help page successfully.'));
    $this->assertText(t('Password Changer for Google'), t('Page title is Password Changer for Google'));
    
  }

  // Test Case 1.2
  function testPasswordChangerGoogleAccessConfiguration() {
    
    //Access configuration page
    $this->drupalGet('admin/config/password_changer/password_changer_google');
    $this->assertResponse(200, t('Access registration page successfully.'));
    $this->assertText(t('Password Changer Google Settings'), t('Page title is Password Changer Google Settings'));
    
  }
  
  //Test Case 1.3, 1.4, 1.5, 1.6
  function testPasswordChangerGoogleAddSettings() {
    
    
    //Test Case 1.3
    $rid = $this->drupalCreateRole(array(), 'UNIVERSAL STUDENTS');
    
    //Create role
    
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('google_login_url' => 'https://www.google.com/accounts/ClientLogin',
                             'domain' => 'students.fhchs.edu',
                             'role' => $rid,
                             'google_api_email' => 'mne4d7@students.fhchs.edu',
                             'google_api_password' => 'thistest',
                             'google_api_service' => 'apps',
                             'google_api_account_type' => 'HOSTED'), t('Save Settings'));
    
    
    //Test Case 1.4
    
    //Create role
    $rid = $this->drupalCreateRole(array(),'Employees');
    
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('domain' => 'employee.fhchs.edu',
                             'role' => $rid,
                             'google_api_email' => 'ldapsync@employee.fhchs.edu',
                             'google_api_password' => 'thistest'), t('Save Settings'));
    
    
    //Test Case 1.5
    
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('role' => $rid,
                             'google_api_email' => 'ldapsync@employee.fhchs.edu',
                             'google_api_password' => 'thistest'), t('Save Settings'));
    
    $this->assertText('Domain field is required','Domain value is missing is missing');
    
    //Test Case 1.6
     $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array(), t('Save Settings'));
    
    
    
  }
  
   //Test Case 1.7
  function testPasswordChangerGoogleUpdateSetting() {
    

    $rid = $this->drupalCreateRole(array(), 'UNIVERSAL STUDENTS');
    
    //Create role    
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('google_login_url' => 'https://www.google.com/accounts/ClientLogin',
                             'domain' => 'students.fhchs.edu',
                             'role' => $rid,
                             'google_api_email' => 'mne4d7@students.fhchs.edu',
                             'google_api_password' => 'thistest',
                             'google_api_service' => 'apps',
                             'google_api_account_type' => 'HOSTED'), t('Save Settings'));
    
    //Check if update link is present
    $this->assertRaw(l('Update','admin/config/password_changer/password_changer_google/update/0'),
                       'Update link is present for the link is present.');
    
    
    //Update record 
    $this->drupalPost('admin/config/password_changer/password_changer_google/update/0',
                       array('google_login_url' => 'https://www.google.com/accounts/ClientLogin',
                             'domain' => 'students.update.fhchs.edu'), t('Save Settings'));
    
    //Check if the update took effect 
    $this->assertText('students.update.fhchs.edu','Record has been updated.');
    
    
  }
  
    //Test Case 1.8
  function testPasswordChangerGoogleRemoveSetting() {
    
    //Create role
    $rid = $this->drupalCreateRole(array(), 'UNIVERSAL STUDENTS');
    
    //Add new setting record    
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('google_login_url' => 'https://www.google.com/accounts/ClientLogin',
                             'domain' => 'students.fhchs.edu',
                             'role' => $rid,
                             'google_api_email' => 'mne4d7@students.fhchs.edu',
                             'google_api_password' => 'thistest',
                             'google_api_service' => 'apps',
                             'google_api_account_type' => 'HOSTED'), t('Save Settings'));
    
    //Check if delete link is presents
    $this->assertRaw(l('Remove','admin/config/password_changer/password_changer_google/remove/0'),
                       'Remove link is present for the link is present.');
    
    //Get confirmation page
    $this->drupalGet('admin/config/password_changer/password_changer_google/remove/0');
    $this->assertResponse(200, t('Access registration page successfully.'));
    $this->assertText('Are you sure you want to delete domain', 'Delete confirmation page.');
    
    //Delete record
    $this->drupalPost('admin/config/password_changer/password_changer_google/remove/0',array(),t('Delete'));
    $this->assertNoRaw(l('Remove','admin/config/password_changer/password_changer_google/remove/0'),
                       'Remove link is present for the link is present.');
      
  }
}


//Extends DrupalWebTestCase to get database connection
class PasswordChangerGoogleUserCase extends DrupalWebTestCase  {


  public static function getInfo() {
    return array(
      'name' => 'Google Password Changer Submodule - Module',
      'description' => 'Test Google password changer from the user perspective, change password.',
      'group' => 'Password Changer',
    );
  }
  //Including modules that needed for the test case
  function setUp() {
    parent::setUp('password_changer_api', 'password_changer_google');
    
    
     //Create admin with access to admin pages
    $this->admin_user = $this->drupalCreateUser(array('administer password changer'));
 
    
    //Test Case 2.1
    //Create student_test user
    
    //Create Role
    $rid_stu = $this->drupalCreateRole(array('access comments', 'access content', 'post comments', 'change own username'),
                                       'UNIVERSAL STUDENTS');
  
    //Set user values
    $edit['name']   = 'student_test';
    $edit['mail']   = 'student_test' . '@example.com';
    $edit['roles']  = array($rid_stu => $rid_stu);
    $edit['pass']   = 'test34';
    $edit['status'] = 1;
    //Creat user
    $account = user_save('', $edit);
    $account->pass_raw = $edit['pass'];
    $this->student_test = $account;   
    
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
    //Create staff_test user
    
    $rid_emp = $this->drupalCreateRole(array('access comments', 'access content', 'post comments', 'change own username'),
                                       'Employees');
  
    //Set user values
    $edit['name']   = 'staff_test';
    $edit['mail']   = 'staff_test' . '@example.com';
    $edit['roles']  = array($rid_emp => $rid_emp);
    $edit['pass']   = 'test34';
    $edit['status'] = 1;
    //Creat user
    $account = user_save('', $edit);
    $account->pass_raw = $edit['pass'];
    $this->staff_test = $account;
    
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
    //Create settings   
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('google_login_url' => 'https://www.google.com/accounts/ClientLogin',
                             'domain' => 'students.fhchs.edu',
                             'role' => $rid_stu,
                             'google_api_email' => 'mne4d7@students.fhchs.edu',
                             'google_api_password' => 'abc123',
                             'google_api_service' => 'apps',
                             'google_api_account_type' => 'HOSTED'), t('Save Settings'));
    
    $this->assertText('students.fhchs.edu','Setting for Domain student.fhchs.edu is created.');                        
    
    
    //Add new setting record    
    $this->drupalPost('admin/config/password_changer/password_changer_google',
                       array('google_login_url' => 'https://www.google.com/accounts/ClientLogin',
                             'domain' => 'employee.fhchs.edu',
                             'role' => $rid_emp,
                             'google_api_email' => 'ldapsync@employee.fhchs.edu',
                             'google_api_password' => '2U8325',
                             'google_api_service' => 'apps',
                             'google_api_account_type' => 'HOSTED'), t('Save Settings'));
    
     $this->assertText('employee.fhchs.edu','Setting for Domain student.fhchs.edu is created.');     
    
  }
  
  function testPasswordChangerGoogleUserChangePassword() {
    
    //Test Case 2.3
    $this->drupalLogin($this->staff_test);
    //Rea
    $this->drupalGet('user/' . $this->staff_test->uid . '/edit');
    $this->assertResponse(200, t('Able to reach the user %name and  profile page.', array('%name' => $this->staff_test->name)));
    
    //Change password
    $this->drupalPost('user/' . $this->staff_test->uid . '/edit', array('current_pass' => 'test34',
                                                                        'pass[pass1]' => 'test12',
                                                                        'pass[pass2]' => 'test12'),t('Save'));
    
    $this->assertText('The changes have been saved', 'Password has been change successfuly in Drupal');
    $this->assertText('Password has been changed in your Google account', 'Password has been change successfuly in Google Account');
    
    //Logout
    $this->drupalLogout();
    
   
    
    //Test Case 2.4
    $this->drupalLogin($this->student_test);
    
    $this->drupalGet('user/' . $this->student_test->uid . '/edit');
    $this->assertResponse(200, t('Able to reach the user %name and  profile page.', array('%name' => $this->staff_test->name)));
    //Change password
    $this->drupalPost('user/' . $this->student_test->uid . '/edit', array('current_pass' => 'test34',
                                                                        'pass[pass1]' => 'test12', 'pass[pass2]' => 'test12'),t('Save'));
    
    $this->assertText('The changes have been saved', 'Password has been change successfuly in Drupal');
    $this->assertText('Password has been changed in your Google account', 'Password has been change successfuly in Google Account');
    
    //Test Case 2.5
    $this->drupalGet('user/' . $this->student_test->uid . '/edit');
    $this->assertResponse(200, t('Able to reach the user %name and  profile page.', array('%name' => $this->staff_test->name)));
    
    $this->drupalPost('user/' . $this->student_test->uid . '/edit', array('current_pass' => 'test12',
                                                                         'pass[pass1]' => 'tes', 'pass[pass2]' => 'tes'),t('Save'));
     
    $this->assertText('Password is shorter than the minimum length  6 require by system password_changer_google',
                      'Password was not change in Google, password is shorter than six charecters.');
  
    //Logout
    $this->drupalLogout();
    
  }
  
}

//Installing module going to test the classes individualy 
module_load_include('module', 'password_changer_api', 'password_changer_api');
module_load_include('inc','password_changer_api','password_changer_api');
module_load_include('inc','password_changer_api','password_changer_api_complexity');
module_load_include('module', 'password_changer_google', 'password_changer_google');
module_load_include('inc','password_changer_google','password_changer_google');

//Test Case 3
//Extends DrupalWebTestCase to get database connection
class PasswordChangerGoogleClasses extends DrupalWebTestCase  {

  //Store role id for each type in private variable
  private $rid_bad;
  private $rid_emp;
  private $rid_stu;

  //Generate information for test case
  public static function getInfo() {
    return array(
      'name' => 'Google Password Changer Submodule - Classes',
      'description' => 'Test Google password changer classes, googleToken and googleUser.',
      'group' => 'Password Changer',
    );
  }
  //Set up configuration needed for all test functions
  function setUp() {
    parent::setUp();
    
     //Test Case 3.1 
    //Create Role UNIVERSAL STUDENTS
    $this->rid_stu = $this->drupalCreateRole(array('access comments', 'access content', 'post comments', 'change own username'),
                                       'UNIVERSAL STUDENTS');
  
    //Set user values student_test 
    $edit['name']   = 'student_test';
    $edit['mail']   = 'student_test' . '@example.com';
    $edit['roles']  = array($this->rid_stu => $this->rid_stu);
    $edit['pass']   = 'test34';
    $edit['status'] = 1;
    
    //Save user
    $account = user_save('', $edit);
    
    //Set the raw password
    $account->pass_raw = $edit['pass'];
    $this->student_test = $account;   
    
    //Test is if user was created
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
    //Create staff_test with the necessary role
    $this->rid_emp = $this->drupalCreateRole(array('access comments', 'access content', 'post comments', 'change own username'),
                                       'Employees');
  
    //Set user values staff
    $edit['name']   = 'staff_test';
    $edit['mail']   = 'staff_test' . '@example.com';
    $edit['roles']  = array($this->rid_emp => $this->rid_emp);
    $edit['pass']   = 'test34';
    $edit['status'] = 1;
    
    //Creat user
    $account = user_save('', $edit);
    $account->pass_raw = $edit['pass'];
    $this->staff_test = $account;
    
    //Test if user staff_test was created
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
  
   //Create bad role
   $this->rid_bad = $this->drupalCreateRole(array('access comments', 'access content', 'post comments', 'change own username'),
                                       'bad_role');
  
    //Set user values
    $edit['name']   = 'bad_user';
    $edit['mail']   = 'bad_user' . '@example.com';
    $edit['roles']  = array($this->rid_bad => $this->rid_bad);
    $edit['pass']   = 'test34';
    $edit['status'] = 1;
    //Creat user
    $account = user_save('', $edit);
    $account->pass_raw = $edit['pass'];
    $this->bad_user = $account;
    
    //Test if user bad_user has been created
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    
  }
  
  
  function testPasswordChangerGoogleClassesGenerateToken() {
    
    //Try to get token with out making configuration this should send an error
    //Test Case 3.2
    try {
      $token_stu = googleToken::getGoogleToken($this->rid_stu);
      $token_emp = googleToken::getGoogleToken($this->rid_emp);
    }
    catch ( passwordChangerGoogleExeption $e ) {
      $this->assertTrue(TRUE, $e->getMessage());      
    }
    
    //Create settings to create token
    $settings[] = array( $this->rid_emp => array('domain' => 'employee.fhchs.edu',
                                                 'email' => 'ldapsync@employee.fhchs.edu',
                                                 'password' => '2U8325',
                                                 'account_type' => 'HOSTED',
                                                 'service' => 'apps')
                       );
    
    $settings[] = array( $this->rid_stu => array('domain' => 'students.fhchs.edu',
                                                'email' => 'mne4d7@students.fhchs.edu',
                                                'password' => 'abc123',
                                                'account_type' => 'HOSTED',
                                                'service' => 'apps')
                      );
    
    //Save settings 
    variable_set('password_changer_google_domains', $settings);
    
    //Test Case 3.3 and Test Case 3.4
    //Generate token for students role
    try {
      
      $token_stu = googleToken::getGoogleToken($this->rid_stu);
      $token_emp = googleToken::getGoogleToken($this->rid_emp);
     
    }
    catch ( passwordChangerGoogleExeption $e ) {
      $this->assertTrue(FALSE, $e->getMessage());      
    }
    
    
    $settings[] = array( $this->rid_bad => array('domain' => 'bad.fhchs.edu',
                                                 'email' => 'bad@students.fhchs.edu',
                                                 'password' => 'abc123',
                                                 'account_type' => 'HOSTED',
                                                 'service' => 'apps')
                      );
    
    //Test Case 3.5
     //Generate token for employee role
    try {
      
      $token_bad = googleToken::getGoogleToken($this->rid_bad);
     
    }
    catch ( passwordChangerGoogleExeption $e ) {
      
      $this->assertTrue(TRUE, $e->getMessage());
      
    }
    
  }
  
  //Generate a Token
  function testPasswordChangerGoogleClassesGenerateCheckUser() {
    
    //Create Settings
    $settings[] = array( $this->rid_emp => array('domain' => 'employee.fhchs.edu',
                                                 'email' => 'ldapsync@employee.fhchs.edu',
                                                 'password' => '2U8325',
                                                 'account_type' => 'HOSTED',
                                                 'service' => 'apps')
                       );
    
    $settings[] = array( $this->rid_stu => array('domain' => 'students.fhchs.edu',
                                                 'email' => 'mne4d7@students.fhchs.edu',
                                                 'password' => 'abc123',
                                                 'account_type' => 'HOSTED',
                                                 'service' => 'apps')
                      );
    
    //Test Case 3.6
    //Saving settings
    variable_set('password_changer_google_domains', $settings);
    
    try {
      
      
      $current_user = new googleUser($this->student_test->name);
    
      $this->assertTrue($current_user->checkUserExist(),t('User %name exist.', array( '%name' => $this->student_test->name)));
    
       
    }
    catch( passwordChangerGoogleExeption $e ) {
      
      $this->assertTrue(FALSE, $e->getMessage());
      
    } 
  
    //Test Case 3.7
    //This uncover a bug that I can't find were this exception is uncaught.
    try {
     
      $current_user = new googleUser($this->bad_user->name);
    
      $this->assertFalse($current_user->checkUserExist(),t('User %name exist.', array( '%name' => $this->bad_user->name)));
      
    }
    catch ( passwordChangerApiExeption $e ) {
      
      $this->assertTrue(TRUE, $e->getMessage());  
      
    }
  
  }
  
  function testPasswordChangerGoogleClassesGenerateChangePassword() {
    
    //Create Settings
    $settings[] = array( $this->rid_emp => array('domain' => 'employee.fhchs.edu',
                                                 'email' => 'ldapsync@employee.fhchs.edu',
                                                 'password' => '2U8325',
                                                 'account_type' => 'HOSTED',
                                                 'service' => 'apps')
                       );
    
    $settings[] = array( $this->rid_stu => array('domain' => 'students.fhchs.edu',
                                                 'email' => 'mne4d7@students.fhchs.edu',
                                                 'password' => 'abc123',
                                                 'account_type' => 'HOSTED',
                                                 'service' => 'apps')
                      );
    
    //Saving settings
    variable_set('password_changer_google_domains', $settings);
    
    
    //Test Case 3.8
    //Create new Google user student
    try {
      //Create new user
      $current_user = new googleUser($this->student_test->name);
      
      $credentials = array('user_name' => $this->student_test->name,
                           'password' => 'test12');
      
      //Change Google
      $result = $current_user->changeUserPassword($credentials);
     
    }
    catch (passwordChangerGoogleExeption $e) {
     
      $this->assertTrue(FALSE, $e->getMessage());
    }
    
    //Test Case 3.9
    //Create new Google bad user
    try {
      
      //Create new user
      $current_user = new googleUser($this->bad_user->name);
      
      //Create credentials to test the change password
      $credentials = array('user_name' => $this->bad_user->name,
                           'password' => 'test12');
      
      //Change Google
      $result = $current_user->changeUserPassword($credentials);
     
    }
    catch (passwordChangerGoogleExeption $e) {
     
      $this->assertTrue(TRUE, $e->getMessage());
    }
  }  
}


